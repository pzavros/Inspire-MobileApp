import 'package:flutter/material.dart';
import 'Questions.dart';
import 'leaderboard.dart';
import 'home_view.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_database/ui/firebase_animated_list.dart';

/*
void main() {
  runApp(const AdminPage());
}
*/
class AdminPage extends StatefulWidget {
  final String competitionId;
  const AdminPage({Key? key, required this.competitionId}) : super(key: key);

  @override
  _AdminPageState createState() => _AdminPageState();
}

class _AdminPageState extends State<AdminPage> {
  //Query db = FirebaseDatabase.instance.ref().child('Competitions');

  late DatabaseReference dbRef;
  late String CompStatus = 'closed';

  //late String popupTitle = "Fail";
  //late String popupMsg = "The name cannot be empty or name already exist.";

  @override
  void initState() {
    print(widget.competitionId);
    super.initState();
    //dbRef = FirebaseDatabase.instance.ref("Competitions");
    //dbRef = FirebaseDatabase.instance.ref().child("${widget.uuid}/Status");
    //dbRef = FirebaseDatabase.instance.ref("${widget.uuid}/Status");
    dbRef =
        FirebaseDatabase.instance.ref("Competitions/${widget.competitionId}");

//Competitions
  }

  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Admin Page'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              ElevatedButton(
                onPressed: () async {
                  if (CompStatus == 'open') {
                    CompStatus = 'running';
                    /*Map<String, bool> status = {
                      'status': CompStatus,
                    };*/
                    // Only update the name, leave the age and address!
                    await dbRef.update({
                      "status": 'running',
                    });
                    //dbRef.push().set(status);
                    //dbRef.push().update(status);

                    //dbRef.update(status);
                    //after push, a unique id is generated by the firebase, does not have a identifier
                  }
                },
                style: ElevatedButton.styleFrom(
                  fixedSize: const Size(50, 50), // Set the button size
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20), // Set the button shape
                    ),
                  ),
                ),
                child: const Text(
                  'Begin competition',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              ElevatedButton(
                onPressed: () async {
                  if (CompStatus == 'closed') {
                    CompStatus = 'open';
                    /*Map<String, bool> status = {
                      'status': CompStatus,
                    };*/
                    // Only update the name, leave the age and address!
                    await dbRef.update({
                    "status": 'open',
                  });
                    //dbRef.push().set(status);
                    //dbRef.push().update(status);

                    //dbRef.update(status);
                    //after push, a unique id is generated by the firebase, does not have a identifier
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  fixedSize: const Size(50, 50), // Set the button size
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20), // Set the button shape
                    ),
                  ),
                ),
                child: const Text(
                  'Open competition',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              ElevatedButton(
                onPressed: () async {
                  if (CompStatus == 'open' || CompStatus == 'running') {
                    CompStatus = 'closed';
                    /*Map<String, bool> status = {
                      'status': CompStatus,
                    };*/
                    // Only update the name, leave the age and address!
                    await dbRef.update({
                      "status": 'closed',
                    });
                    //dbRef.push().set(status);
                    //dbRef.push().update(status);

                    //dbRef.update(status);
                    //after push, a unique id is generated by the firebase, does not have a identifier
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  fixedSize: const Size(50, 50), // Set the button size
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20), // Set the button shape
                    ),
                  ),
                ),
                child: const Text(
                  'Close competition',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              const SizedBox(height: 20),
              const Text(
                'Question 1',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 10),
              const Text(
                'Answer 1',
                style: TextStyle(fontSize: 18),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {},
                style: ElevatedButton.styleFrom(
                  fixedSize: const Size(50, 50), // Set the button size
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20), // Set the button shape
                    ),
                  ),
                ),
                child: const Text(
                  'Show answer',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              ElevatedButton(
                onPressed: () {},
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  fixedSize: const Size(50, 50), // Set the button size
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20), // Set the button shape
                    ),
                  ),
                ),
                child: const Text(
                  'Next question',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(context, MaterialPageRoute(builder: (context) {
                    return HomeView(); // pass uuid to AdminSettings
                  }));
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  fixedSize: const Size(50, 50), // Set the button size
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20), // Set the button shape
                    ),
                  ),
                ),
                child: const Text(
                  'End Question',
                  style: TextStyle(fontSize: 20),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
